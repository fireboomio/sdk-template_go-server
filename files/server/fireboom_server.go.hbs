package server

import (
    _ "custom-go/generated/latest"
    "github.com/joho/godotenv"
{{#with hooksConfiguration}}
    {{~#if authentication}}
    authentication "custom-go/authentication"
    {{/if}}
    {{~#if global.httpTransport}}
    "custom-go/global"
    {{/if}}
    {{~#if (isAnyTrue (isNotEmpty queries) (isNotEmpty mutations) (isNotEmpty subscriptions))}}
        {{#if (isAbsent onceMap 'custom-go/generated' true)}}
    "custom-go/generated"
        {{/if}}
        {{#each queries as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{/each}}
        {{#each mutations as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{/each}}
        {{#each subscriptions as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{/each}}
    {{/if}}
{{/with}}
    "custom-go/pkg/base"
    "custom-go/pkg/plugins"
    "custom-go/pkg/types"
{{#each s3Providers}}
    {{#each uploadProfiles}}
        {{#if (isAnyTrue hooks.preUpload hooks.postUpload)}}
            {{#if (isAbsent onceMap 'custom-go/generated')}}
    "custom-go/generated"
            {{/if}}
    {{fmtSprintf 'storage_%s_%s' name @key}} "{{fmtSprintf 'custom-go/storage/%s/%s' name @key}}"
        {{/if}}
    {{/each}}
{{/each}}
)

const nodeEnvFilepath = "{{nodeEnvFilepath}}"

func init() {
    _ = godotenv.Overload(nodeEnvFilepath)

    types.WdgHooksAndServerConfig = types.WunderGraphHooksAndServerConfig{
        Hooks: types.HooksConfiguration{
    {{#with hooksConfiguration}}
            Global: plugins.GlobalConfiguration{
        {{#if global.httpTransport}}
                HttpTransport: plugins.HttpTransportHooks{
                {{#each global.httpTransport as |conf hookName|}}
                    {{upperFirst hookName}}: global.{{upperFirst hookName}},
                {{/each}}
                },
                {{#if global.wsTransport}}
                WsTransport: plugins.WsTransportHooks{
                    OnConnectionInit: global.OnConnectionInit,
                },
                {{/if}}
        {{/if}}
            },
            Authentication: plugins.AuthenticationConfiguration{
        {{#each authentication}}
                {{upperFirst this}}: authentication.{{upperFirst this}},
        {{/each}}
            },
            Queries: base.OperationHooks{
        {{#each queries as |hooks operationName|}}
                "{{operationName}}": {
            {{#each hooks}}
                    {{upperFirst this}}: plugins.ConvertBodyFunc[generated.{{replaceSpecial (upperFirst operationName) "__"}}InternalInput, generated.{{replaceSpecial (upperFirst operationName) "__"}}ResponseData](operation_{{replaceSpecial operationName "__"}}.{{upperFirst this}}),
            {{/each}}
                },
        {{/each}}
            },
            Mutations: base.OperationHooks{
        {{#each mutations as |hooks operationName|}}
                "{{operationName}}": {
            {{#each hooks}}
                    {{upperFirst this}}: plugins.ConvertBodyFunc[generated.{{replaceSpecial (upperFirst operationName) "__"}}InternalInput, generated.{{replaceSpecial (upperFirst operationName) "__"}}ResponseData](operation_{{replaceSpecial operationName "__"}}.{{upperFirst this}}),
            {{/each}}
                },
        {{/each}}
            },
            Subscriptions: base.OperationHooks{
        {{#each subscriptions as |hooks operationName|}}
                "{{operationName}}": {
            {{#each hooks}}
                    {{upperFirst this}}: plugins.ConvertBodyFunc[generated.{{replaceSpecial (upperFirst operationName) "__"}}InternalInput, generated.{{replaceSpecial (upperFirst operationName) "__"}}ResponseData](operation_{{replaceSpecial operationName "__"}}.{{upperFirst this}}),
            {{/each}}
                },
        {{/each}}
            },
        {{#if s3Providers}}
            Uploads: map[string]plugins.UploadHooks{
            {{#each s3Providers}}
                {{~#if uploadProfiles}}
                "{{name}}": {
                    {{#each uploadProfiles}}
                    {{~#if (isAnyTrue hooks.preUpload hooks.postUpload)}}
                    "{{@key}}": {
                        {{#if hooks.preUpload}}
                        PreUpload: plugins.ConvertUploadFunc[generated.{{upperFirst (fmtSprintf '%s_%sProfileMeta' ../name @key)}}]({{fmtSprintf 'storage_%s_%s' ../name @key}}.PreUpload),
                        {{/if~}}
                        {{#if hooks.postUpload}}
                        PostUpload: plugins.ConvertUploadFunc[generated.{{upperFirst (fmtSprintf '%s_%sProfileMeta' ../name @key)}}]({{fmtSprintf 'storage_%s_%s' ../name @key}}.PostUpload),
                        {{/if}}
                    },
                    {{/if~}}
                    {{/each}}
                },
                {{/if~}}
            {{/each}}
            },
        {{/if}}
        },
    {{/with}}
    }
}
